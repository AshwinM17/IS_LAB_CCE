Lab 1
    Q4: numpy
            np.array()
            np.dot()
    Q5: 
        sympy
            mod_inverse(a,26) equivalent to pow(a,-1,26)

lab 2
    Q1) DES ECB random padding
    Q2)AES-128 with in CBC mode with PKCS7 padding.
    Q3)DES CBC mode with PKCS7 padding
        AES-256 in CBC mode with PKCS7 padding
        
        Calculate times of each as well
    Q4)Triple DES in CBC mode
    Q5)AES-192 in ECB mode
    Addditional)-
            Q1)DES and AES(128, 192, and 256 bits key).
                Plot the graph which shows execution time
                Compare time taken
            Q2)DES ECB on 2 blocks(same as Q1 normal)
            Q3)AES 256 in ECB mode
            Q4)DES CBC with IV given
            Q5)AES with Nonce=0x0(8 byte)
Lab 3
    Q1)RSA with specific key size using RSA.generate(2048)
    Q2)ECC 
    Q3)Elgamel with random keys
    Q4)File transfer using RSA(2048-bit) and ECC(secp256r1 curve) with key verification of ECC key by SHA-256
    Q5)Diffie Hellman
    Addditional)-
            Q3)RSA without any library and using one char at a time  
            Q4)Elgamel for  multiple files(communication system between an org) 
            Q5)RSA (using 2048-bit keys) and ElGamal (using the secp256r1 curve)

Lab 4
    Q1)diffie hellman key exchange for scalable system and AES encryption (EAX mode)(question had RSA there but not used in code)
    for RSA replace this with create_system function
    def generate_rsa_key_pair(self, subsystem_id):
        # Generate a new RSA key pair for the specified subsystem
        key = RSA.generate(2048)  # 2048-bit RSA key
        self.subsystems[subsystem_id] = {
            'key_pair': key,  # Store the RSA key pair
            'shared_key': None  # Initialize shared key as None
            'private' : get_random_bytes(32) 
        }
        self.log(f"RSA key pair generated for {subsystem_id}.")
    
    Q2)saving key in json file,renewing key ,

Lab 5
    Q1)simple hash
    Q2)simple hash in client and server
    Q3)Analyze SHA-1 hash,SHA-256,MD5
    Additional):- hashing using SHA256 

bpc
    hash using rsa
lab 7
    Q1)Paillier (PHE addition ke liye) %n_squared
    Q2)RSA (PHE multiplicatio ke liyen) %n
    Additional):- Paillier same as Q1
                  Elgam (supoorts multiplication)  %p
                  benchmark comparision
lab 8
    Q1) SSE using AES
    Q2) PKSE using Pailer

NOTE:
 hashlib.sha256(record.encode()).hexdigest()
 return a 64 hex digits
 before .hexdigest() we have 32 bytes(ie in bytes as .encode and sha256 returns bytes)
 .encode("utf-8") converts string to bytes